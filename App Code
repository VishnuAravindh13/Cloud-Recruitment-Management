import os
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.files.storage import default_storage
from rest_framework import serializers, viewsets
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from django.conf import settings
from django.core.wsgi import get_wsgi_application
import boto3

# Settings
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SECRET_KEY = 'your-secret-key'
DEBUG = True
ALLOWED_HOSTS = ['*']
INSTALLED_APPS = ['django.contrib.auth', 'django.contrib.contenttypes', 'rest_framework', 'jobs', 'candidates']
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "your_redshift_db",
        "USER": "your_redshift_user",
        "PASSWORD": "your_redshift_password",
        "HOST": "your-redshift-cluster.us-east-1.redshift.amazonaws.com",
        "PORT": "5439",
    }
}
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = "your-s3-bucket-name"
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
WSGI_APPLICATION = 'config.wsgi.application'

# Models
class Job(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    company = models.CharField(max_length=255)
    location = models.CharField(max_length=255)
    posted_at = models.DateTimeField(auto_now_add=True)

class Candidate(models.Model):
    name = models.CharField(max_length=255)
    email = models.EmailField(unique=True)
    resume = models.FileField(upload_to="resumes/")
    applied_jobs = models.ManyToManyField(Job, related_name="candidates")

# Serializers
class JobSerializer(serializers.ModelSerializer):
    class Meta:
        model = Job
        fields = '__all__'

class CandidateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Candidate
        fields = '__all__'

# Views
class JobViewSet(viewsets.ModelViewSet):
    queryset = Job.objects.all()
    serializer_class = JobSerializer

class CandidateViewSet(viewsets.ModelViewSet):
    queryset = Candidate.objects.all()
    serializer_class = CandidateSerializer

# URLs
router = DefaultRouter()
router.register(r'jobs', JobViewSet)
router.register(r'candidates', CandidateViewSet)
urlpatterns = [
    path('api/', include(router.urls)),
]

# WSGI
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
application = get_wsgi_application()

# Deployment
DOCKERFILE = """
FROM python:3.9
WORKDIR /app
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
COPY . .
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "config.wsgi:application"]
"""

JENKINSFILE = """
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                sh 'pip install -r requirements.txt'
            }
        }
        stage('Test') {
            steps {
                sh 'python manage.py test'
            }
        }
        stage('Docker Build & Push') {
            steps {
                sh 'docker build -t myrepo/recruitment_system:latest .'
                sh 'docker push myrepo/recruitment_system:latest'
            }
        }
        stage('Deploy') {
            steps {
                sh 'kubectl apply -f deployment.yaml'
            }
        }
    }
}
"""

DEPLOYMENT_YAML = """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recruitment-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: recruitment
  template:
    metadata:
      labels:
        app: recruitment
    spec:
      containers:
      - name: recruitment
        image: myrepo/recruitment_system:latest
        ports:
        - containerPort: 8000
"""

SERVICE_YAML = """
apiVersion: v1
kind: Service
metadata:
  name: recruitment-service
spec:
  type: LoadBalancer
  selector:
    app: recruitment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
"""
